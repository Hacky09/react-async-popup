{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/api","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"API\",\n  \"description\": \"APIS of react-async-popup\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"react-async-popup provides two components \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Confirm\"), \".\"), mdx(\"p\", null, \"To use Modal or Confirm, new method must be called, it takes an optional paramater.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"const callbacks = await Confirm.new()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"const callbacks = await Modal.new()\\n\")), mdx(\"h2\", {\n    \"id\": \"new-method\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"new method\"), mdx(\"p\", null, \"The new method returns a promise, which gets resolved with an object, which has two methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"destroy\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"const { show, destroy } = await Confirm.new(config)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show method to opens the modal/config\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"destroy method destroys the instance\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" method takes a config object as parameter which can have following values -\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tables\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"popupStyle\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"React.CSSProperties\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"additional style for popup\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"okText\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Ok\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"text for ok button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"cancelText\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Cancel\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"text for cancel button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"maskClosable\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"for Modal - true and for Confirm - false\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"whether close popup on mask/background click\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"closable\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"false\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"if true cancel buttons will be hidden and closeOnEscape will be false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"closeOnEscape\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"true\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"whether close popup on escape press\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"wrapClassName\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"class for popup container\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{labelledby: string, describedby: string}\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{labelledby: 'react-async-popup-header', describedby: 'react-async-popup-content'}\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"element ID's for accessibility\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"destroyOnClose\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"true\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"whether to destroy the popup instance on close\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"container\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"HTMLElement\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"html element where popup should mount\")))), mdx(\"h3\", {\n    \"id\": \"show-method\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"show method\"), mdx(\"p\", null, \"Makes the Modal/Confirm visible to the user, it returns a promise, by default promise resolves with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" on ok and with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" on cancel.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"show\"), \" method also takes a config object as perameter, value of the config is same as \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"new\"), \" method\\njust \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"destroyOnClose\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"container\"), \" properties are not available here.\")), mdx(\"p\", null, \"Value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show\"), \" parameter can override the initial values given to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" method,\\nthis is really usefull when developer wan't to use single instance in more then one context.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"\\nasync function onDelete() {\\n\\n    const { show } = await Confirm.new();\\n\\n    const result = await show({\\n      title: ' Are you sure you want to delete the file ?'\\n    });\\n\\n    if (result === false) {\\n      return;\\n    }\\n    ...\\n  }\\n\")), mdx(\"span\", {\n    style: {\n      \"color\": \"red\",\n      \"fontWeight\": \"bold\"\n    }\n  }, \"Show method can also resolve with user provided value -\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"content\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"footer\"), \" components provided in the config of new or show method will receive\\n\", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ok\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"cancel\"), \" callback methods as props/paramater.\\nThe value provided to these methods will be used to resolve the promise returned by \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"show\"), \" method.\\n\")), mdx(\"h3\", {\n    \"id\": \"destroy-method\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"destroy method\"), mdx(\"p\", null, \"The destroy method destroys the instance, it returns a promise which resolves without any value.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Once destroyed the \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"show\"), \" method will always resolve with \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"null\"), \" value. \")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#new-method","title":"new method","items":[{"url":"#show-method","title":"show method"},{"url":"#destroy-method","title":"destroy method"}]}]},"frontmatter":{"title":"API","description":"APIS of react-async-popup"}}},"pageContext":{"id":"d82fa3c9-6bbe-52ff-be5d-2613b6e92755"}}}